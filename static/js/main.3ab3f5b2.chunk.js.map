{"version":3,"sources":["components/weatherDisplay/weatherDisplay.module.css","containers/App.module.css","components/input/input.module.css","assets/01d.svg","assets/01n.svg","assets/02d.svg","assets/02n.svg","assets/03d.svg","assets/09d.svg","assets/10d.svg","assets/11d.svg","assets/13n.svg","assets/50d.svg","assets/50n.svg","components/input/input.js","components/weatherDisplay/weatherDisplay.js","components/weather/weather.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","cityInput","props","className","classes","Input","onSubmit","citySubmitted","textInput","type","placeholder","weatherDisplay","imagePath","icon","clearSkyDay","clearSkyNight","fewCloudsDay","fewCloudsNight","scatteredClouds","showerRainDay","rainDay","thunderstorm","snow","fogDay","fogNight","container","cityName","src","alt","description","temperature","Math","round","weather","weatherData","main","temp","name","App","state","getCityNameHandler","bind","getWeatherData","event","preventDefault","input","document","querySelector","this","setState","value","city","APIKEY","process","console","log","weatherURL","toLowerCase","a","fetch","mode","response","ok","alert","json","getWeather","id","title","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3ab3f5b2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"weatherDisplay_container__2rddH\",\"temperature\":\"weatherDisplay_temperature__2FZoQ\",\"icon\":\"weatherDisplay_icon__2r6lJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1IQbR\",\"title\":\"App_title__1gQOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"input_Input__26tJz\",\"textInput\":\"input_textInput__2ukq0\"};","module.exports = __webpack_public_path__ + \"static/media/01d.2110aa2c.svg\";","module.exports = __webpack_public_path__ + \"static/media/01n.e0f7ef82.svg\";","module.exports = __webpack_public_path__ + \"static/media/02d.acd8aae3.svg\";","module.exports = __webpack_public_path__ + \"static/media/02n.89ef778b.svg\";","module.exports = __webpack_public_path__ + \"static/media/03d.add62541.svg\";","module.exports = __webpack_public_path__ + \"static/media/09d.4d9f4d05.svg\";","module.exports = __webpack_public_path__ + \"static/media/10d.310969c6.svg\";","module.exports = __webpack_public_path__ + \"static/media/11d.57216538.svg\";","module.exports = __webpack_public_path__ + \"static/media/13n.0f0243b4.svg\";","module.exports = __webpack_public_path__ + \"static/media/50d.d2783a70.svg\";","module.exports = __webpack_public_path__ + \"static/media/50n.d5179f94.svg\";","import React from \"react\";\nimport classes from './input.module.css'\n\nconst cityInput = (props) => {\n  return (\n  <form className={classes.Input} onSubmit={props.citySubmitted}>\n    <input className={classes.textInput} type=\"text\" placeholder=\"Your city\"/>\n  </form >\n  )\n}\n\nexport default cityInput","import React, { Component } from \"react\";\nimport classes from \"./weatherDisplay.module.css\";\nimport clearSkyDay from \"../../assets/01d.svg\";\nimport clearSkyNight from \"../../assets/01n.svg\";\nimport fewCloudsDay from \"../../assets/02d.svg\";\nimport fewCloudsNight from \"../../assets/02n.svg\";\nimport scatteredClouds from \"../../assets/03d.svg\";\nimport showerRainDay from \"../../assets/09d.svg\";\nimport rainDay from \"../../assets/10d.svg\";\nimport thunderstorm from \"../../assets/11d.svg\";\nimport snow from \"../../assets/13n.svg\";\nimport fogDay from \"../../assets/50d.svg\";\nimport fogNight from \"../../assets/50n.svg\";\n\nconst weatherDisplay = (props) => {\n  let imagePath;\n\n  switch (props.icon) {\n    case \"01d\":\n      imagePath = clearSkyDay;\n      break;\n    case \"01n\":\n      imagePath = clearSkyNight;\n      break;\n    case \"02d\":\n      imagePath = fewCloudsDay;\n      break;\n    case \"02n\":\n      imagePath = fewCloudsNight;\n      break;\n    case \"03d\":\n    case \"03n\":\n    case \"04d\":\n    case \"04n\":\n      imagePath = scatteredClouds;\n      break;\n    case \"09d\":\n    case \"09n\":\n      imagePath = showerRainDay;\n      break;\n    case \"10d\":\n    case \"10n\":\n      imagePath = rainDay;\n      break;\n    case \"11d\":\n    case \"11n\":\n      imagePath = thunderstorm;\n      break;\n    case \"13d\":\n    case \"13n\":\n      imagePath = snow;\n      break;\n    case \"50d\":\n      imagePath = fogDay;\n      break;\n    case \"50n\":\n      imagePath = fogNight;\n      break;\n    default:\n      break;\n  }\n\n  return (\n    <div className={classes.container}>\n      <h2> Today's weather in {props.cityName} :</h2>\n      <img src={imagePath} alt={props.description} className={classes.icon} />\n      <div className={classes.temperature}>\n        {Math.round(props.temperature * 10) / 10}Â°C\n      </div>\n    </div>\n  );\n};\n\nexport default weatherDisplay;\n","import React from \"react\";\nimport WeatherDisplay from \"../weatherDisplay/weatherDisplay\";\n\nconst weather = (props) => {\n\n  let weatherData = props.weather;\n  \n  let description = weatherData.weather[0].description;\n  let icon = weatherData.weather[0].icon;\n  let temperature = weatherData.main.temp;\n  let cityName = weatherData.name;\n\n  let display = (\n    <WeatherDisplay\n      description={description}\n      icon={icon}\n      temperature={temperature}\n      cityName={cityName}\n    />\n  );\n  return display;\n};\n\nexport default weather;\n","import React, { Component } from \"react\";\nimport classes from \"./App.module.css\";\nimport Input from \"../components/input/input\";\nimport Weather from \"../components/weather/weather\";\n\n//load here\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityName: \"Paris\",\n      weather: {}\n    };\n    this.getCityNameHandler = this.getCityNameHandler.bind(this);\n    this.getWeatherData = this.getWeatherData.bind(this);\n  }\n\n  getCityNameHandler(event) {\n    event.preventDefault();\n    const input = document.querySelector(\"input\");\n    this.setState({ cityName: input.value });\n    this.getWeatherData(input.value);\n    input.value = \"\"\n  }\n\n  getWeatherData(city) {\n    const APIKEY = process.env.REACT_APP_APIKEY;\n    console.log(APIKEY);\n    const weatherURL = `https://api.openweathermap.org/data/2.5/weather?units=metric&appid=${APIKEY}&q=${city.toLowerCase()}`;\n\n    const getWeather = async () => {\n      try {\n        const response = await fetch(weatherURL, { mode: \"cors\" });\n        if (!response.ok) {\n          alert(\"Sorry the city was misspelled, try again\")\n        } else {\n          const weatherData = await response.json();\n\n          this.setState ({ weather: weatherData\n          })\n        }\n      } catch (err) {\n        alert(err);\n      }\n    };\n\n  getWeather()\n  }\n\n  componentDidMount() {\n  this.getWeatherData(this.state.cityName)\n  };\n\n  render() {\n    if (!this.state.weather.weather) {\n      return null;\n      \n  }\n    return (\n      <div className={classes.App}>\n        <h1 id={classes.title}>What's the weather today ?</h1>\n        <Input citySubmitted={this.getCityNameHandler} />\n        <Weather weather={this.state.weather} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}